mcols(res, use.names = TRUE)
data_rna_LGG <- GDCprepare(query_LGG, summarizedExperiment = TRUE) #guardamos os nossos dados e os metadados
library(TCGAbiolinks) #interface com o tcga
data_rna_LGG <- GDCprepare(query_LGG, summarizedExperiment = TRUE) #guardamos os nossos dados e os metadados
query_LGG <- GDCquery(project = "TCGA-LGG",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts") #uery de pesquisa para ir buscar o exato "pacote" de dados
data_rna_LGG <- GDCprepare(query_LGG, summarizedExperiment = TRUE, save = TRUE, save.filename = "TCGA_LGG.rda")
load("TCGA_LGG.rda") #para ser mais f?cil aceder aos dados
data_rna_LGG <- GDCprepare(query_LGG, summarizedExperiment = TRUE) #guardamos os nossos dados e os metadados
ALLm2
data_rna_lgg  <- GDCprepare(query)
query <- GDCquery(
project = proj,
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts"
)
query <- GDCquery(
project = proj,
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts"
)
projects <- getGDCprojects()
projects$id
query <- GDCquery(
project = proj,
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts"
)
query_LGG <- GDCquery(project = "TCGA-LGG",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts") #uery de pesquisa para ir buscar o exato "pacote" de dados
data_rna_LGG <- GDCprepare(query_LGG, summarizedExperiment = TRUE) #guardamos os nossos dados e os metadados
GDCdownload(query_LGG)
data_rna_LGG <- GDCprepare(query_LGG, summarizedExperiment = TRUE) #guardamos os nossos dados e os metadados
data_rna_LGG <- GDCprepare(query_LGG, summarizedExperiment = TRUE, save = TRUE, save.filename = "TCGA_LGG.rda")
library(DESeq2)
data_de <- data_rna_LGG[,!is.na(data_rna_LGG$paper_IDH.status)] #as amostras que possuem uma condi??o definida, excluindo aquelas com valor "NA" (que representa dados ausentes).
ddsSE <- DESeqDataSet(data_de, design = ~ paper_IDH.status) #estamos a comparar a express?o gen?tica com os grupos existentes em design,neste caso mutante e wildtype
rowSums(counts(ddsSE))>=10 #A segunda linha cria um objeto DESeqDataSet, que cont?m as contagens de express?o g?nica e o design experimental. A vari?vel a ser testada ? especificada. Neste caso, estamos comparando os grupos Mutant e Wildtype:
# Extrair as colunas onde a soma das linhas ? <= 10
keep <- which(rowSums(counts(ddsSE) >= 10) >= 3) #filtragem aprofundada
ddsSE_filtrado <- ddsSE[keep, ] #apenas colocar os genes que t?m umas counts acima de 10  e tem de ter pelo menos 10,10,10 nao pode ter tudo zero e um 11
ddsSE_norm <- DESeq(ddsSE_filtrado) # Essa fun??o realiza a normaliza??o dos dados, estima os par?metros do modelo e realiza o teste de hip?tese para cada gene.
p-value_filter= sum(res$pvalue < 0.05, na.rm=TRUE)#filtragem por pvalue normal
res <- results(ddsSE_norm, name = "paper_IDH.status_WT_vs_Mutant") #vai de encontro ao grupo de metadados escolhido em cima com design
dea <- as.data.frame(res) # converte o objeto "res" em um data frame para facilitar a visualiza??o dos resultados
p-value_filter= sum(res$pvalue < 0.05, na.rm=TRUE)#filtragem por pvalue normal
summary(res)
mcols(res, use.names = TRUE)
summary(res)
pvalue_filter= sum(res$pvalue < 0.05, na.rm=TRUE)#filtragem por pvalue normal
pvalue_filter
de_genes <- rownames(pvalue_filter)[which(pvalue_filter$padj < 0.05)] #probabilidade inferior a 5 % de encontrar um falso positivo
pvalue_filter= sum(dea$pvalue < 0.05, na.rm=TRUE)#filtragem por pvalue normal
pvalue_filter
de_genes <- rownames(pvalue_filter)[which(pvalue_filter$padj < 0.05)] #probabilidade inferior a 5 % de encontrar um falso positivo
pvalue_fi= sum(dea$pvalue < 0.05, na.rm=TRUE)#filtragem por pvalue normal
pvalue_fi
summary(res)
#PARTE NOVAAAAAAAAAA:
res
#PARTE NOVAAAAAAAAAA:
nrow(res)
de_genes <- rownames(pvalue_filter)[which(pvalue_filter$padj < 0.05)] #probabilidade inferior a 5 % de encontrar um falso positivo
de_genes <- rownames(res)[which(dea$padj < 0.05)] #probabilidade inferior a 5 % de encontrar um falso positivo
de_genes
summary(res)
#PARTE NOVAAAAAAAAAA:
res
padj_fi= sum(dea$padj < 0.1, na.rm=TRUE) #probabilidade inferior a 5 % de encontrar um falso positivo
padj_fi
pvalue_fi
padj_fi= sum(dea$padj < 0.05, na.rm=TRUE) #probabilidade inferior a 5 % de encontrar um falso positivo
padj_fi
padj_fi
padj_fi= sum(dea$padj < 0.01, na.rm=TRUE) #probabilidade inferior a 5 % de encontrar um falso positivo
padj_fi
topGene <- rownames(res)[which.min(res$padj)]
plotCounts(dds, gene = topGene, intgroup=c("dex"))
plotCounts(ddsSE_norm, gene = topGene, intgroup=c("dex"))
plotCounts(ddsSE_norm, gene = topGene, intgroup=c("paper_IDH.status"))
library("ggbeeswarm")
hist(dea$padj, breaks=20,col = "grey", border = "white", xlab = "P-adj",
ylab = "Number of genes", main = "P-adj value distribution")
hist(dea$pvalue, breaks=20,col = "grey", border = "white", xlab = "P-adj",
ylab = "Number of genes", main = "P-adj value distribution") #hist para vizualizar o pvalue
hist(dea$pvalue, breaks=20,col = "grey", border = "white", xlab = "P-value",
ylab = "Number of genes", main = "P-value value distribution") #hist para vizualizar o p.value
hist(dea$padj, breaks=20,col = "grey", border = "white", xlab = "P-adj",
ylab = "Number of genes", main = "P-adj value distribution") #hist para vizualizar o padj
install.packages("ggbeeswarm")
library("ggbeeswarm")
geneCounts <- plotCounts(ddsSE_norm, gene = topGene, intgroup = c("paper_IDH.status"),
returnData = TRUE)
ggplot(geneCounts, aes(x = dex, y = count, color = cell)) +
scale_y_log10() +  geom_beeswarm(cex = 3)
ggplot(geneCounts, aes(x = paper_IDH.status, y = count, color = cell)) +
scale_y_log10() +  geom_beeswarm(cex = 3)
ggplot(geneCounts, aes(x = paper_IDH.status, y = count, color = blue)) +
scale_y_log10() +  geom_beeswarm(cex = 3)
ggplot(geneCounts, aes(x = paper_IDH.status, y = count, color = paper_IDH.status)) +
scale_y_log10() +  geom_beeswarm(cex = 3)
ggplot(geneCounts, aes(x = "condição", y = count, color = paper_IDH.status)) +
scale_y_log10() +  geom_beeswarm(cex = 3)
geneCounts <- plotCounts(ddsSE_norm, gene = topGene, intgroup = c("paper_IDH.status"),
returnData = TRUE)
ggplot(geneCounts, aes(x = paper_IDH.status, y = count, color = paper_IDH.status)) +
scale_y_log10() +  geom_beeswarm(cex = 3)
library(Biobase)
meta_LGG = colData(data_rna_LGG) #buscar apenas os metadadaos
meta_LGG
colnames(meta_LGG)
geneCounts <- plotCounts(ddsSE_norm, gene = topGene, intgroup = c("paper_IDH.status","vital_status"),
returnData = TRUE)
ggplot(geneCounts, aes(x = paper_IDH.status, y = count, color = vital_status)) +
scale_y_log10() +  geom_beeswarm(cex = 3)
geneCounts <- plotCounts(ddsSE_norm, gene = topGene, intgroup = c("paper_IDH.status","patient"), # relacionar a mutação com o facto de estar vivo ou morto
returnData = TRUE)
ggplot(geneCounts, aes(x = paper_IDH.status, y = count, color = patient)) +
scale_y_log10() +  geom_beeswarm(cex = 3)  # criar o gráfico para vizualizar melhor. podemos explorar isto muito melhor
geneCounts <- plotCounts(ddsSE_norm, gene = topGene, intgroup = c("paper_IDH.status","vital_status"), # relacionar a mutação com o facto de estar vivo ou morto
returnData = TRUE)
ggplot(geneCounts, aes(x = paper_IDH.status, y = count, color = vital_status)) +
scale_y_log10() +  geom_beeswarm(cex = 3)  # criar o gráfico para vizualizar melhor. podemos explorar isto muito melhor
top_20_genes <- res[order(dea$padj)[1:20],]
plotMA(top_20_genes, main="DESeq2", ylim=c(-10,10))
resultsNames(ddsSE_norm) # extrai o nome da coluna que cont?m as diferen?as entre as condi??es Mutant e Wildtype:
res <- lfcShrink(ddsSE_norm, coef="paper_IDH.status_WT_vs_Mutant", type="apeglm")
library("apeglm")
install.packages("apeglm")
library("apeglm")
library("apeglm")
install.packages("apeglm")
plotMA(ddsSE_norm, ylim = c(-5, 5))
plotMA(ddsSE_norm, ylim = c(-10, 10)) #tirar conclusões disto
with(res[topGene, ], {
points(baseMean, log2FoldChange, col="dodgerblue", cex=2, lwd=2)
text(baseMean, log2FoldChange, topGene, pos=2, col="dodgerblue")
})
text(baseMean, log2FoldChange, topGene, pos=2, col="green")
with(res[topGene, ], {
points(baseMean, log2FoldChange, col="green", cex=2, lwd=2)
text(baseMean, log2FoldChange, topGene, pos=2, col="green")
})
top_100_genes <- res[order(dea$padj)[1:100],]
plotMA(top_100_genes, main="DESeq2", ylim=c(-10,10))
#apenas com o top 100
top_100_genes <- res[order(dea$padj)[1:100],]
plotMA(top_100_genes, main="DESeq2", ylim=c(-10,10))
with(top_100_genes[topGene, ], {
points(baseMean, log2FoldChange, col="green", cex=2, lwd=2)
text(baseMean, log2FoldChange, topGene, pos=2, col="green")
})
with(res[topGene, ], {
points(baseMean, log2FoldChange, col="green", cex=2, lwd=2)
text(baseMean, log2FoldChange, topGene, pos=2, col="green")
})
# com todos os genes:
plotMA(ddsSE_norm, ylim = c(-10, 10)) #pontos a azul são diferencialmente expressos, a cinza não são. vai de encontro aos nossos testes
with(res[topGene, ], {
points(baseMean, log2FoldChange, col="green", cex=2, lwd=2)
text(baseMean, log2FoldChange, topGene, pos=2, col="green")
})
rank = order(res$padj)
p20 = rank[1:20]
res$padj[p20]
order_cols = order(res$padj)
order_cols
ALL20 = ddsSE_norm[,order_cols]
heatmap(res$padj[p20], Colv = NA, labCol = ALL20$padj)
mat  <- res[order(dea$padj)[1:100],]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(meta_LGG, c("paper_IDH.status"))
anno <- as.data.frame(meta_LGG[, c("paper_IDH.status")])
pheatmap(mat, annotation_col = anno)
heatmap(mat, annotation_col = anno)
mat  <- dea[order(dea$padj)[1:100],]
pheatmap(mat, annotation_col = anno)
heatmap(mat, annotation_col = anno)
install.packages("pheatmap")
library("pheatmap")
pheatmap(mat, annotation_col = anno)
mat  <- dea[order(dea$padj)[1:20],]
anno <- as.data.frame(meta_LGG[, c("paper_IDH.status")])
pheatmap(mat, annotation_col = anno, color = colorRampPalette(c("red", "yellow", "blue"))(20))
mat  <- ddsSE_norm[order(dea$padj)[1:20],]
dim(metadata_matriz_clean) #vamos trabalahr a partir desta j? filtrada
metadata_matriz_clean <- meta_LGG[, -c(cols_with_not_reported, cols_with_Not_Reported, cols_with_NA)] #retirar as colunas que nao queremos
cols_with_not_reported <- which(sapply(meta_LGG,function(x) sum(x == "not reported", na.rm = TRUE)) > 50)
cols_with_Not_Reported <- which(sapply(meta_LGG,function(x) sum(x == "Not Reported", na.rm = TRUE)) > 50)
cols_with_NA <- which(sapply(meta_LGG, function(x) sum(is.na(x))) > 50)
metadata_matriz_clean <- meta_LGG[, -c(cols_with_not_reported, cols_with_Not_Reported, cols_with_NA)] #retirar as colunas que nao queremos
dim(metadata_matriz_clean) #vamos trabalahr a partir desta j? filtrada
sem_NA=na.omit(metadata_matriz_clean$age_at_index) #pr?-filtragem
dim(sem_NA)
#heatmap:
sem_NA2=na.omit(metadata_matriz_clean$paper_IDH.status)
dim(sem_NA2)
#heatmap:
metadata_matriz_clean$paper_IDH.status
sem_NA2
anno <- as.data.frame(sem_NA2[, c("paper_IDH.status")])
anno <- as.data.frame(sem_NA2)
pheatmap(mat, annotation_col = anno, color = colorRampPalette(c("red", "yellow", "blue"))(20))
mat  <- mat - rowMeans(mat)
mat
mat  <- assay(counts)[order(dea$padj)[1:20]
mat
mat  <- mat - rowMeans(mat)
mat
mat  <- assay(counts)[order(dea$padj)[1:20]]
mat  <- assay(counts)[res[order(dea$padj)[1:20]],]
mat  <- res[order(dea$padj)[1:20]],
mat  <- res[order(dea$padj)[1:20]]
topVarGenes <- head(order(rowVars(assay(counts)), decreasing = TRUE), 20)
library("genefilter")
install.packages("genefilter")
library("genefilter")
top_20_genes <- res[order(dea$padj)[1:20],]
top_20_genes
pheatmap(top_20_genes , annotation_col = anno, color = colorRampPalette(c("red", "yellow", "blue"))(20))
top_20_genes \
top_20_genes
nova_tabela <- subset(top_20_genes, select = c("padj"))
nova_tabela
heatmap(nova_tabela, Colv = NA, labCol = sem_NA2)
nova_matriz <- data.matrix(nova_tabela)
heatmap(nova_matriz, Colv = NA, labCol = sem_NA2)
nova_matriz
nova_tabela <- subset(top_20_genes, select = c("padj", "pvalue"))
nova_tabela
nova_matriz <- data.matrix(nova_tabela)
nova_matriz
heatmap(nova_matriz, Colv = NA, labCol = sem_NA2)
# Replace missing values with the minimum value in the matrix
min_val <- min(nova_matriz, na.rm = TRUE)
nova_matriz[is.na(nova_matriz)] <- min_val
# Create heatmap
heatmap(nova_matriz, Colv = NA, labCol = sem_NA2)
sem_NA2
hist(dea$pvalue, breaks=20,col = "grey", border = "white", xlab = "P-value",
ylab = "Number of genes", main = "P-value value distribution") #hist para vizualizar o p.value
hist(dea$pvalue, breaks=20,col = "grey", border = "white", xlab = "P-value",
ylab = "Number of genes", main = "P-value value distribution") #hist para vizualizar o p.value
hist(dea$padj, breaks=20,col = "grey", border = "white", xlab = "P-adj",
ylab = "Number of genes", main = "P-adj value distribution") #hist para vizualizar o padj
plotCounts(ddsSE_norm, gene = topGene, intgroup=c("paper_IDH.status")) #Gráfico que mostra as contagens do gene com maior expressão para a condição Mutante, e para a condição normal
topGene <- rownames(res)[which.min(res$padj)] #gene com maior expressão
plotCounts(ddsSE_norm, gene = topGene, intgroup=c("paper_IDH.status")) #Gráfico que mostra as contagens do gene com maior expressão para a condição Mutante, e para a condição normal
